// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.25.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../commons/udto.dart';
import '../copy_client/dtos.dart';
import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

Future<void> saveProperty(
        {required String k, required String v, dynamic hint}) =>
    RustLib.instance.api.saveProperty(k: k, v: v, hint: hint);

Future<String> loadProperty({required String k, dynamic hint}) =>
    RustLib.instance.api.loadProperty(k: k, hint: hint);

Future<String> getProxy({dynamic hint}) =>
    RustLib.instance.api.getProxy(hint: hint);

Future<void> setProxy({required String proxy, dynamic hint}) =>
    RustLib.instance.api.setProxy(proxy: proxy, hint: hint);

Future<UILoginState> initLoginState({dynamic hint}) =>
    RustLib.instance.api.initLoginState(hint: hint);

Future<UILoginState> login(
        {required String username, required String password, dynamic hint}) =>
    RustLib.instance.api
        .login(username: username, password: password, hint: hint);

Future<UIRegisterResult> register(
        {required String username, required String password, dynamic hint}) =>
    RustLib.instance.api
        .register(username: username, password: password, hint: hint);

Future<UIPageRankItem> rank(
        {required String dateType,
        required int offset,
        required int limit,
        dynamic hint}) =>
    RustLib.instance.api
        .rank(dateType: dateType, offset: offset, limit: limit, hint: hint);

Future<UIPageUIComicInList> recommends(
        {required int offset, required int limit, dynamic hint}) =>
    RustLib.instance.api.recommends(offset: offset, limit: limit, hint: hint);

Future<UIComicData> comic({required String pathWord, dynamic hint}) =>
    RustLib.instance.api.comic(pathWord: pathWord, hint: hint);

Future<UIPageComicChapter> comicChapters(
        {required String comicPathWord,
        required String groupPathWord,
        required int limit,
        required int offset,
        dynamic hint}) =>
    RustLib.instance.api.comicChapters(
        comicPathWord: comicPathWord,
        groupPathWord: groupPathWord,
        limit: limit,
        offset: offset,
        hint: hint);

Future<UIComicQuery> comicQuery({required String pathWord, dynamic hint}) =>
    RustLib.instance.api.comicQuery(pathWord: pathWord, hint: hint);

Future<UIChapterData> comicChapterData(
        {required String comicPathWord,
        required String chapterUuid,
        dynamic hint}) =>
    RustLib.instance.api.comicChapterData(
        comicPathWord: comicPathWord, chapterUuid: chapterUuid, hint: hint);

Future<UITags> tags({dynamic hint}) => RustLib.instance.api.tags(hint: hint);

Future<UIPageComicInExplore> explorer(
        {String? ordering,
        String? top,
        String? theme,
        required int offset,
        required int limit,
        dynamic hint}) =>
    RustLib.instance.api.explorer(
        ordering: ordering,
        top: top,
        theme: theme,
        offset: offset,
        limit: limit,
        hint: hint);

Future<UIPageUIComicInList> comicSearch(
        {required String qType,
        required String q,
        required int offset,
        required int limit,
        dynamic hint}) =>
    RustLib.instance.api.comicSearch(
        qType: qType, q: q, offset: offset, limit: limit, hint: hint);

Future<void> viewComicInfo(
        {required String comicPathWord,
        required String comicName,
        required List<Author> comicAuthors,
        required String comicCover,
        dynamic hint}) =>
    RustLib.instance.api.viewComicInfo(
        comicPathWord: comicPathWord,
        comicName: comicName,
        comicAuthors: comicAuthors,
        comicCover: comicCover,
        hint: hint);

Future<void> viewChapterPage(
        {required String comicPathWord,
        required String chapterUuid,
        required String chapterName,
        required int chapterOrdered,
        required int chapterSize,
        required int chapterCount,
        required int pageRank,
        dynamic hint}) =>
    RustLib.instance.api.viewChapterPage(
        comicPathWord: comicPathWord,
        chapterUuid: chapterUuid,
        chapterName: chapterName,
        chapterOrdered: chapterOrdered,
        chapterSize: chapterSize,
        chapterCount: chapterCount,
        pageRank: pageRank,
        hint: hint);

Future<UIViewLog?> findComicViewLog({required String pathWord, dynamic hint}) =>
    RustLib.instance.api.findComicViewLog(pathWord: pathWord, hint: hint);

Future<UIPageUIViewLog> listComicViewLogs(
        {required int offset, required int limit, dynamic hint}) =>
    RustLib.instance.api
        .listComicViewLogs(offset: offset, limit: limit, hint: hint);

Future<void> collectToAccount(
        {required String comicId,
        required bool isCollect,
        required String comicPathWord,
        dynamic hint}) =>
    RustLib.instance.api.collectToAccount(
        comicId: comicId,
        isCollect: isCollect,
        comicPathWord: comicPathWord,
        hint: hint);

Future<UIPageCollectedComic> collectFromAccount(
        {required int freeType,
        required String ordering,
        required int offset,
        required int limit,
        dynamic hint}) =>
    RustLib.instance.api.collectFromAccount(
        freeType: freeType,
        ordering: ordering,
        offset: offset,
        limit: limit,
        hint: hint);

Future<UICacheImage> cacheImage(
        {required String cacheKey,
        required String url,
        required String useful,
        String? extendsFieldFirst,
        String? extendsFieldSecond,
        String? extendsFieldThird,
        dynamic hint}) =>
    RustLib.instance.api.cacheImage(
        cacheKey: cacheKey,
        url: url,
        useful: useful,
        extendsFieldFirst: extendsFieldFirst,
        extendsFieldSecond: extendsFieldSecond,
        extendsFieldThird: extendsFieldThird,
        hint: hint);

Future<void> cleanCache({required int time, dynamic hint}) =>
    RustLib.instance.api.cleanCache(time: time, hint: hint);

Future<void> deleteDownloadComic(
        {required String comicPathWord, dynamic hint}) =>
    RustLib.instance.api
        .deleteDownloadComic(comicPathWord: comicPathWord, hint: hint);

Future<void> appendDownload(
        {required UIQueryDownloadComic data, dynamic hint}) =>
    RustLib.instance.api.appendDownload(data: data, hint: hint);

Future<List<String>> inDownloadChapterUuid(
        {required String comicPathWord, dynamic hint}) =>
    RustLib.instance.api
        .inDownloadChapterUuid(comicPathWord: comicPathWord, hint: hint);

Future<void> resetFailDownloads({dynamic hint}) =>
    RustLib.instance.api.resetFailDownloads(hint: hint);

Future<List<UIDownloadComic>> downloadComics({dynamic hint}) =>
    RustLib.instance.api.downloadComics(hint: hint);

Future<List<UIDownloadComicGroup>> downloadComicGroups(
        {required String comicPathWord, dynamic hint}) =>
    RustLib.instance.api
        .downloadComicGroups(comicPathWord: comicPathWord, hint: hint);

Future<List<UIDownloadComicChapter>> downloadComicChapters(
        {required String comicPathWord, dynamic hint}) =>
    RustLib.instance.api
        .downloadComicChapters(comicPathWord: comicPathWord, hint: hint);

Future<List<UIDownloadComicPage>> downloadComicPages(
        {required String comicPathWord,
        required String chapterUuid,
        dynamic hint}) =>
    RustLib.instance.api.downloadComicPages(
        comicPathWord: comicPathWord, chapterUuid: chapterUuid, hint: hint);

Future<bool> downloadIsPause({dynamic hint}) =>
    RustLib.instance.api.downloadIsPause(hint: hint);

Future<void> downloadSetPause({required bool pause, dynamic hint}) =>
    RustLib.instance.api.downloadSetPause(pause: pause, hint: hint);

Future<String> httpGet({required String url, dynamic hint}) =>
    RustLib.instance.api.httpGet(url: url, hint: hint);

Future<void> exports(
        {required List<String> uuidList,
        required String exportToFolder,
        required ExportsType exportsType,
        dynamic hint}) =>
    RustLib.instance.api.exports(
        uuidList: uuidList,
        exportToFolder: exportToFolder,
        exportsType: exportsType,
        hint: hint);
